Scope

The purpouse of our project is to provide our users with a 'matching' service based on their location, the content of their most recent tweets, and some basic filters such as age range and sex. Users, after having linked their Twitter account with our service will be presented with a number of 'potential matches' which will be choosen for them by our service based on being withing a certain distance from one another physically, some filter preferences controlled by the users, and possibly common keywords found in different users recent tweets. For each potential match, the user will be able to select if they wish to 'match' with the other user, and if both users elect to match with one another, our service records the pair of users as being a match. Once two users are a match, they are then able to use our service to send messages to one another.

We will be using Twitters public REST API for our login system, which will use 3-legged OAuth so that our server is able to obtain an OAuth token we can user to access the most recent tweets of our users which we will display to other users so they can determine if they want to match with a user, as well as for server-side processing to provide users with a set of potential matches who they are more likely to share interests with (scanning them for shared keywords, etc.) and give our users the option to add potential matches and matches as Twitter followers from within our application.

We will be using MongoDB for server-side data persistence. We will need to store users OAuth tokens, their date of birth, sex (for user with filters), and their most recent geographical location (obtained via either HTML 5 geolocation, or iOS location services). We will also need to store users potential matches (and which if any users have accepted or rejected the potential match), some keywords from users tweets, actual matches between users, messages sent between users, and whether one of the users has elected to 'unmatch' with an existing match so that the users are no longer able to send messages between one another, and can no longer be listed as potential matches. MongoDB's geoNear/geoWithin feature was a major motivation for choosing it over other database systems.